<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">
 
    <http auto-config="true">
    	<!-- Filter that intercepts the url matching given pateern-->
        <intercept-url pattern="/customer/**" access="hasAuthority('ADMIN')" />
        
        <!--  We have disabled csrf filter for now -->
        <csrf disabled="true" />
        
        <!--  Filter for form login  -->
         <form-login
      		 login-page="/"
       		 authentication-failure-url="/error"
      		 username-parameter="username"
      		 password-parameter="password" />
      		 
      	<!--  logout filter -->
      	<logout logout-success-url="/" />

      	
    </http>
    
    <!-- Configuration beans to use our custom defined beans -->
    <beans:bean id ="userDetailServiceImpl" class ="com.ektha.spring.cms.service.UserDetailServiceImpl" />
    
    <!--  Configuring noop password encoder for now  -->
    <beans:bean id = "passwordEncoder" class ="org.springframework.security.crypto.password.NoOpPasswordEncoder">
    </beans:bean>
		
    <authentication-manager>
        <authentication-provider user-service-ref = "userDetailServiceImpl">
        	<password-encoder ref = "passwordEncoder"></password-encoder>
           <!-- this was the manual way to do implementation, now we will perform customized implementation. 
             <user-service>
                <user name="admin" password="amit" authorities="ROLE_ADMIN" />
            </user-service> -->
            
        </authentication-provider>
    </authentication-manager>
    
 
</beans:beans>